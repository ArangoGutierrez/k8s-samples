# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include:
  - local: '.common-ci.yml'

default:
  tags:
    - cnt
    - container-dev
    - docker/multi-arch
    - docker/privileged
    - os/linux
    - type/docker

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # Don't release "devel-tagged" images
  RELEASE_DEVEL_BRANCH: "DISABLED"
  DEVEL_RELEASE_IMAGE_VERSION: "devel"
  # On the multi-arch builder we don't need the qemu setup.
  SKIP_QEMU_SETUP: "1"
  # Define the public staging registry
  STAGING_REGISTRY: registry.gitlab.com/nvidia/container-images/samples/staging
  STAGING_VERSION: ${CI_COMMIT_SHORT_SHA}

.image-pull:
  stage: image-build
  variables:
    IN_REGISTRY: "${STAGING_REGISTRY}"
    IN_IMAGE_NAME: cuda-samples
    IN_VERSION: "${LOWER_CASE_SAMPLE}-${STAGING_VERSION}"
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"
    OUT_IMAGE_NAME: "${CI_REGISTRY_IMAGE}"
    OUT_VERSION: ${LOWER_CASE_SAMPLE}-${CI_COMMIT_SHORT_SHA}"
  # We delay the job start to allow the public pipeline to generate the required images.
  when: delayed
  start_in: 30 minutes
  timeout: 30 minutes
  retry:
    max: 2
    when:
      - job_execution_timeout
      - stuck_or_timeout_failure
  before_script:
    - >
      docker pull ${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST} > /dev/null && echo "${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST}" || ( echo "${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST} does not exist" && sleep infinity )
  script:
    - docker pull ${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST}
    - docker tag ${IN_REGISTRY}/${IN_IMAGE_NAME}:${IN_VERSION}-${DIST} ${OUT_IMAGE_NAME}:${OUT_VERSION}-${DIST}
    - docker login -u "${OUT_REGISTRY_USER}" -p "${OUT_REGISTRY_TOKEN}" "${OUT_REGISTRY}"
    - docker push ${OUT_IMAGE_NAME}:${OUT_VERSION}-${DIST}

image-vectoradd-ubuntu18.04:
  extends:
    - .image-pull
    - .dist-ubuntu18.04
    - .sample-vectoradd

image-vectoradd-ubuntu20.04:
  extends:
    - .image-pull
    - .dist-ubuntu20.04
    - .sample-vectoradd

image-vectoradd-ubi8:
  extends:
    - .image-pull
    - .dist-ubi8
    - .sample-vectoradd

image-nbody-ubuntu18.04:
  extends:
    - .image-pull
    - .dist-ubuntu18.04
    - .sample-nbody

# The .scan step forms the base of the image scan operation performed before releasing
# images.
.scan:
  stage: scan
  image: "${PULSE_IMAGE}"
  variables:
    IMAGE: "${CI_REGISTRY_IMAGE}:${LOWER_CASE_SAMPLE}-${CI_COMMIT_SHORT_SHA}-${DIST}"
    IMAGE_ARCHIVE: "cuda-samples.tar"
  except:
    variables:
      - $SKIP_SCANS && $SKIP_SCANS == "yes"
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    # TODO: We should specify the architecture here and scan all architectures
    - docker pull "${IMAGE}"
    - docker save "${IMAGE}" -o "${IMAGE_ARCHIVE}"
    - AuthHeader=$(echo -n $SSA_CLIENT_ID:$SSA_CLIENT_SECRET | base64 -w0)
    - >
      export SSA_TOKEN=$(curl --request POST --header "Authorization: Basic $AuthHeader" --header "Content-Type: application/x-www-form-urlencoded" ${SSA_ISSUER_URL} | jq ".access_token" |  tr -d '"')
    - if [ -z "$SSA_TOKEN" ]; then exit 1; else echo "SSA_TOKEN set!"; fi
  script:
    - pulse-cli -n $NSPECT_ID --ssa $SSA_TOKEN scan -i $IMAGE_ARCHIVE -p $CONTAINER_POLICY -o
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - pulse-cli.log
      - licenses.json
      - sbom.json
      - vulns.json
      - policy_evaluation.json

# Define the scan targets
scan-vectoradd-ubuntu18.04:
  extends:
    - .scan
    - .dist-ubuntu18.04
    - .sample-vectoradd

scan-vectoradd-ubuntu20.04:
  extends:
    - .scan
    - .dist-ubuntu20.04
    - .sample-vectoradd

scan-vectoradd-ubi8:
  extends:
    - .scan
    - .dist-ubi8
    - .sample-vectoradd

scan-nbody-ubuntu18.04:
  extends:
    - .scan
    - .dist-ubuntu18.04
    - .sample-nbody

# Define external release helpers
.release:ngc:
  extends:
    - .release:external
  variables:
    OUT_REGISTRY_USER: "${NGC_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${NGC_REGISTRY_TOKEN}"
    OUT_REGISTRY: "${NGC_REGISTRY}"
    OUT_IMAGE_NAME: "${NGC_REGISTRY_IMAGE}"
    # Disable external releases for now
    DOCKER: echo

.release:dockerhub:
  extends:
    - .release:external
  variables:
    OUT_REGISTRY_USER: "${REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${REGISTRY_TOKEN}"
    OUT_REGISTRY: "${DOCKERHUB_REGISTRY}"
    OUT_IMAGE_NAME: "${REGISTRY_IMAGE}"
    # Disable external releases for now
    DOCKER: echo

# Define the external release targets
# Release to NGC
release:ngc-vectoradd-ubuntu18.04:
  extends:
    - .release:ngc
    - .dist-ubuntu18.04
    - .sample-vectoradd

release:ngc-vectoradd-ubuntu20.04:
  extends:
    - .release:ngc
    - .dist-ubuntu20.04
    - .sample-vectoradd

release:ngc-vectoradd-ubi8:
  extends:
    - .release:ngc
    - .dist-ubi8
    - .sample-vectoradd

release:ngc-nbody-ubuntu18.04:
  extends:
    - .release:ngc
    - .dist-ubuntu18.04
    - .sample-nbody

# Release to Dockerhub
release:dockerhub-vectoradd-ubuntu18.04:
  extends:
    - .release:dockerhub
    - .dist-ubuntu18.04
    - .sample-vectoradd

release:dockerhub-vectoradd-ubuntu20.04:
  extends:
    - .release:dockerhub
    - .dist-ubuntu20.04
    - .sample-vectoradd

release:dockerhub-vectoradd-ubi8:
  extends:
    - .release:dockerhub
    - .dist-ubi8
    - .sample-vectoradd

release:dockerhub-nbody-ubuntu18.04:
  extends:
    - .release:dockerhub
    - .dist-ubuntu18.04
    - .sample-nbody
