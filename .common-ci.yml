# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

default:
  image: docker:stable
  services:
    - name: docker:stable-dind
      command: ["--experimental"]

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - image
  - lint
  - go-checks
  - go-build
  - unit-tests
  - package-build
  - image-build
  - test
  - scan
  - aws_kube_setup
  - integration_tests
  - e2e_tests
  - aws_kube_clean
  - release

# Define the distribution targets
.dist-ubuntu18.04:
  variables:
    DIST: ubuntu18.04

.dist-ubuntu20.04:
  variables:
    DIST: ubuntu20.04

.dist-ubi8:
  variables:
    DIST: ubi8

# Define the sample targets
.sample-vectoradd:
  variables:
    SAMPLE: vectorAdd
    LOWER_CASE_SAMPLE: vectoradd

.sample-nbody:
  variables:
    SAMPLE: nbody
    LOWER_CASE_SAMPLE: nbody

# .release forms the base of the deployment jobs which push images to the CI registry.
# This is extended with the version to be deployed (e.g. the SHA or TAG) and the
# target os.
.release:
  stage:
    release
  variables:
    # Define the source image for the release
    IMAGE_NAME: "${CI_REGISTRY_IMAGE}/cuda-samples"
    VERSION: "${CI_COMMIT_SHORT_SHA}"
    IMAGE_TAG: "${LOWER_CASE_SAMPLE}-${CI_COMMIT_SHORT_SHA}-${DIST}"
    # OUT_IMAGE_VERSION is overridden for external releases
    OUT_IMAGE_VERSION: "${CI_COMMIT_SHORT_SHA}"
    OUT_IMAGE_TAG: "${LOWER_CASE_SAMPLE}-${OUT_IMAGE_VERSION}-${DIST}"
  before_script:
    # We ensure that the OUT_IMAGE_VERSION is set
    - 'echo Version: ${OUT_IMAGE_VERSION} ; [[ -n "${OUT_IMAGE_VERSION}" ]] || exit 1'

    # In the case where we are deploying a different version to the CI_COMMIT_SHA, we
    # need to tag the image.
    # Note: a leading 'v' is stripped from the version if present
    - apk add --no-cache make bash
    - 'echo "Logging in to CI registry ${CI_REGISTRY}"'
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - docker pull "${IMAGE_NAME}:${IMAGE_TAG}"
  script:
    - docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${OUT_IMAGE_NAME}:${OUT_IMAGE_TAG}"
    # Log in to the "output" registry, tag the image and push the image
    - 'echo "Logging in to output registry ${OUT_REGISTRY}"'
    - docker logout
    - docker login -u "${OUT_REGISTRY_USER}" -p "${OUT_REGISTRY_TOKEN}" "${OUT_REGISTRY}"
    - make IMAGE_NAME=${OUT_IMAGE_NAME} IMAGE_TAG=${OUT_IMAGE_TAG} -f deployments/container/Makefile push-${DIST}

# Define a staging release step that pushes an image to an internal "staging" repository
# This is triggered for all pipelines (i.e. not only tags) to test the pipeline steps
# outside of the release process.
.release:staging:
  extends:
    - .release
  variables:
    OUT_REGISTRY_USER: "${CI_REGISTRY_USER}"
    OUT_REGISTRY_TOKEN: "${CI_REGISTRY_PASSWORD}"
    OUT_REGISTRY: "${CI_REGISTRY}"
    OUT_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/staging/cuda-samples"

# Define an external release step that pushes an image to an external repository.
# This includes a devlopment image off master.
.release:external:
  extends:
    - .release
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        OUT_IMAGE_VERSION: "${CI_COMMIT_TAG}"
    - if: $CI_COMMIT_BRANCH == $RELEASE_DEVEL_BRANCH
      variables:
        OUT_IMAGE_VERSION: "${DEVEL_RELEASE_IMAGE_VERSION}"

# Define the release jobs
release:staging-vectoradd-ubi8:
  extends:
    - .release:staging
    - .dist-ubi8
    - .sample-vectoradd
  needs:
    - image-vectoradd-ubi8

release:staging-vectoradd-ubuntu18.04:
  extends:
    - .release:staging
    - .dist-ubuntu18.04
    - .sample-vectoradd
  needs:
    - image-vectoradd-ubuntu18.04

release:staging-vectoradd-ubuntu20.04:
  extends:
    - .release:staging
    - .dist-ubuntu20.04
    - .sample-vectoradd
  needs:
    - image-vectoradd-ubuntu20.04

release:staging-nbody-ubuntu18.04:
  extends:
    - .release:staging
    - .dist-ubuntu18.04
    - .sample-nbody
  dependencies:
    - image-nbody-ubuntu18.04
